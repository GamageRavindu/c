

//list queue

#include <stdio.h>
#include <stdlib.h>

#define maxqueue 10
typedef enum {False, True} Boolean;
typedef float queue_element;

typedef struct {
    queue_element queue_item[maxqueue];
    int front;
    int rear;
    int count;
}queue;

void create_queue(queue *q) {
    q->count = 0;
    q->front = 0;
    q->rear = -1;
}

int isqueueempty(queue *q) {
    if (q->count == 0) {
        return True;
    }
    return False;
}

int isqueuefull(queue *q) {
    if (q->count == maxqueue ) {
        return True;
    } else {
        return False;
    }
}

void append(queue *q, float x) {
    if (isqueuefull(q)) {
        printf(("queue if full  \n"));
        exit(1);
    } else {
        q->queue_item[++q->rear] = x;
        q->count++;
    }
}

void serve(queue *q, float *x ) {
    if (isqueueempty(q)) {
        printf("queue is empty");
    } else {
        *x = q->queue_item[q->front++];
        q->count--;
    }
}

//array list
#define maxlist 10

typedef float list_type;

typedef struct {
    list_type list_element[maxlist];
    int count;
}list;

void create_list(list *l) {
    l->count = 0;
}



Boolean islistempty(list *l) {
    return (l->count == 0);
}
Boolean islistfull(list *l ) {
    return (l->count == maxlist);
}

void insertlist(list *l, float x) {
    if (islistfull(l)) {
        printf("list is full\n");
    } else {
        l->list_element[l->count++] = x;
    }
}

void bubble_sort(list *l) {
    for(int i=0; i<= l->count -2; i++) {
        for (int j=0; j<= l->count -2 -i; j++) {
            if (l->list_element[j] > l->list_element[j+1]) {
                float k = l->list_element[j];
                l->list_element[j] = l->list_element[j+1];
                l->list_element[j+1] = k;
            }
        }
    }
}

int main(void) {
    queue q;
    list l;
    create_queue(&q);
    create_list(&l);

    append(&q, 5.4);
    append(&q, 3.6);
    append(&q, 106);
    append(&q, 8);
    append(&q, 0.9);
    append(&q, 27.2);
    append(&q, 8.4);
    append(&q, 1900.5);
    append(&q, 4.5);
    printf("\n queue\n");

    for (int i=0; i<9; i++) {
        printf("%.2f ", q.queue_item[i]);
    }

    for (int i=0; i<9; i++) {
        float y;
        serve(&q, &y);
        insertlist(&l, y);
    }

    printf("\n list\n");

    for (int i=0; i<9; i++) {
        printf("%.2f ", l.list_element[i]);
    }

    printf("\n sorted list \n");
    bubble_sort(&l);

    for (int i=0; i<9; i++) {
        printf("%.2f ", l.list_element[i]);
    }


    return 0;
}


//stack

#include <stdio.h>
#include <stdlib.h>

#define max_stack 20

typedef int stackEntry;

typedef struct {
    int top;
    stackEntry entry[max_stack];
}Stack;

void createStack(Stack *s) {
    s->top = -1;
}

typedef enum {
    FALSE,
    TRUE
}boolean;

boolean isStackEmpty(const Stack *s) {
    return(s->top == -1);
}

boolean isStackFull(const Stack *s) {
    return(s->top == max_stack -1 );
}

void push(stackEntry item, Stack *s) {
    if(!isStackFull(s)) {
        s->entry[++s->top] = item;
    } else {
        printf("- stack is full ! -");
        exit(1);
    }
}

void pop(stackEntry *item, Stack *s) {
    if(!isStackEmpty(s)) {
        *item = s->entry[s->top--];
    } else {
        printf("- stack is empty ! -");
        exit(1);
    }
}

void printStack(Stack *s){
    if(isStackEmpty(s)){
        printf("stack is empty! ");
    } else {
        printf("stack content is:\n");
        for(int i= s->top; i >= 0; i--){
            printf("\t%d", s->entry[i]);
            printf("\n");
        }
    }
}


int main(){
    Stack s;
    createStack(&s);
    push(10, &s);
    push(20, &s);
    push(30, &s);
    push(40, &s);
    printStack(&s);
    return 0;
}

//sort

void insertionSort(int arr[], int size) {
    for (int i = 1; i < size; i++) {
        int key = arr[i];
        int j = i - 1;

        // Shift elements to the right to create space for the key
        while (j >= 0 && arr[j] > key) {
            arr[j + 1] = arr[j];
            j--;
        }
        arr[j + 1] = key;
    }
}


void selectionSort(int arr[], int size) {
    for (int i = 0; i < size - 1; i++) {
        int minIndex = i;

        // Find the index of the smallest element in the unsorted part
        for (int j = i + 1; j < size; j++) {
            if (arr[j] < arr[minIndex]) {
                minIndex = j;
            }
        }

        // Swap the smallest element with the current element
        if (minIndex != i) {
            int temp = arr[i];
            arr[i] = arr[minIndex];
            arr[minIndex] = temp;
        }
    }
}



//LINEAR SEARCH

int linearSearch(int arr[], int n, int x) {
    for (int i = 0; i < n; i++)
        if (arr[i] == x)
            return i;
    return -1;
}



//BINARY SEARCH


int binarySearch(int arr[], int l, int r, int x) {
    if (r >= l) {
        int mid = (r + l) / 2;
        if (arr[mid] == x)
            return mid;
        if (arr[mid] > x)
            return binarySearch(arr, l, mid - 1, x);
        return binarySearch(arr, mid + 1, r, x);
    }
    return -1;
}


//linked list

#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int data;
    struct Node *next;
} Node;

Node* createNode(int data) {
    Node *newNode = (Node *)malloc(sizeof(Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

void insertAtEnd(Node **head, int data) {
    Node *newNode = createNode(data);
    if (*head == NULL) {
        *head = newNode;
    } else {
        Node *temp = *head;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newNode;
    }
}

void printList(Node *head) {
    while (head != NULL) {
        printf("%d -> ", head->data);
        head = head->next;
    }
    printf("NULL\n");
}


//linked queue
typedef struct QueueNode {
    int data;
    struct QueueNode *next;
} QueueNode;

typedef struct {
    QueueNode *front;
    QueueNode *rear;
} Queue;

void initializeQueue(Queue *q) {
    q->front = q->rear = NULL;
}

void enqueue(Queue *q, int data) {
    QueueNode *newNode = (QueueNode *)malloc(sizeof(QueueNode));
    newNode->data = data;
    newNode->next = NULL;
    if (q->rear == NULL) {
        q->front = q->rear = newNode;
    } else {
        q->rear->next = newNode;
        q->rear = newNode;
    }
}

int dequeue(Queue *q) {
    if (q->front == NULL) {
        printf("Queue is empty!\n");
        exit(1);
    }
    int data = q->front->data;
    QueueNode *temp = q->front;
    q->front = q->front->next;
    if (q->front == NULL) {
        q->rear = NULL;
    }
    free(temp);
    return data;
}

void printQueue(Queue *q) {
    QueueNode *temp = q->front;
    while (temp != NULL) {
        printf("%d -> ", temp->data);
        temp = temp->next;
    }
    printf("NULL\n");
}



//stackLinked----------------------------
typedef enum {false, true} bool;

typedef struct
{
    int item;
    Node *next;
}Node;


typedef struct 
{
    Node *top;
    bool isfull;
    int no_ele;

}StackLinked;

void createStack(StackLinked *s){
    s->top = NULL;
    s->isfull = false;
    s->no_ele = 0;
};

void linkedpush(StackLinked *s, int x){
    Node *np;
    np = (Node*)malloc(sizeof(Node));
    if (np == NULL)
    {
        printf("Failed");
    }else
    {
        np->item = x;
        np->next = s->top;
        s->top = np;
        s->no_ele++;     
    }
    
};

void linkedpop(StackLinked *s, int *item){
    Node *np;
    *item = np->item;
    np = s->top;
    s->top = s->top->next;
    s->no_ele--;
    free(np);
};




//binary search tree ----------------------------------

struct node {
    int key;
    struct node *left, *right;
};

struct node *newNode(int item) {
    struct node *temp = (struct node *)malloc(sizeof(struct node));
    temp->key = item;
    temp->left = temp->right = NULL;
    return temp;
}

void inorderBST(struct node *root) {
    if (root != NULL) {
        inorderBST(root->left);
        printf("%d \n", root->key);
        inorderBST(root->right);
    }
}

struct node *insert(struct node *node, int key) {
    if (node == NULL) return newNode(key);
    if (key < node->key)
        node->left = insert(node->left, key);
    else if (key > node->key)
        node->right = insert(node->right, key);
    return node;
}



